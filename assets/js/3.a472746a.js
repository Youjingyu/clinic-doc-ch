(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{189:function(t,n,e){"use strict";e.r(n);var s=e(0),a=Object(s.a)({},function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",{staticClass:"content"},[t._m(0),t._v(" "),e("blockquote",[e("p",[t._v("译者注：本篇文档只是关于 Clinic 使用文档的翻译，建议先阅读"),e("a",{attrs:{href:"https://clinicjs.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网"),e("OutboundLink")],1),t._v("对 Clinic 的介绍后，再来看这篇文档。")])]),t._v(" "),e("p",[t._v("在开始使用 Clinic 之前，我们需要先在电脑上安装 Clinic，并按照下面的步骤运行几个测试，以保证一切正常：")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),e("p",[t._v("2.确定 Clinic 是否安装成功")]),t._v(" "),t._m(5),t._v(" "),t._m(6),e("p",[t._v("3.执行上面的命令应该输出如下的内容：")]),t._v(" "),t._m(7),t._v(" "),t._m(8),e("p",[t._v("4.我们上传了一些例子到 Github 供你测试。现在先使用 "),e("a",{attrs:{href:"https://clinicjs.org/doctor/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Clinic Doctor"),e("OutboundLink")],1),t._v(" 和 "),e("a",{attrs:{href:"https://github.com/mcollina/autocannon",target:"_blank",rel:"noopener noreferrer"}},[t._v("autocannon"),e("OutboundLink")],1),t._v(" 来尝试一下第一个例子：")]),t._v(" "),t._m(9),t._v(" "),t._m(10),e("p",[t._v("上面的命令使用 autocannon 对一个具有 IO 问题的应用进行测试，测试完成后，会自动在浏览器中打开 Doctor 工具。")]),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),e("p",[t._v("通常，在使用 Clinic 时，我们首先使用 Clinic Doctor 来确定应用程序中存在哪些性能问题。然后，Doctor 会告诉我们接下来应该用什么工具并提供具体分析的建议。")]),t._v(" "),t._m(13)])},[function(){var t=this.$createElement,n=this._self._c||t;return n("h1",{attrs:{id:"开始"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#开始","aria-hidden":"true"}},[this._v("#")]),this._v(" 开始")])},function(){var t=this.$createElement,n=this._self._c||t;return n("blockquote",[n("p",[this._v("Before you get started with Clinic, first let's make sure we install it on our machines and run a couple of tests just to make sure everything is working fine. Let's follow these steps to kick off:")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[this._v("1.注意：Node.js 版本必须大于等于 "),n("code",[this._v("8.11.1")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("blockquote",[n("ol",[n("li",[this._v("Note: You must use a version of Node.js >= 8.11.1")])])])},function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -g clinic\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -g autocannon\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("blockquote",[n("ol",{attrs:{start:"2"}},[n("li",[this._v("Confirm that it has installed ok with:")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("clinic --help\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("blockquote",[n("ol",{attrs:{start:"3"}},[n("li",[this._v("It should print something similar to the following:")])])])},function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("Clinic - v2.2.1\n\nGetting started\nAs a first step, run the clinic doctor:\n\n  clinic doctor -- node server.js\n\nThen benchmark your server with wrk or autocannon:\n\n  wrk http://localhost:3000\n  autocannon http://localhost:3000\n\nFinally shut down your server "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Ctrl+C"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(". Once the server process has "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("shutdown")]),t._v("\nclinic doctor will analyse the collected data and detect what "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("type")]),t._v(" of issue\nyou are having. Based on the issue type, it will provide a recommendation "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v("\nyou.\n\nFor example, to debug I/O issues, use Clinic Bubbleprof:\n\n  clinic bubbleprof -- node server.js\n\nThen benchmark your server again, just like you did with clinic doctor.\n\nReport an issue\nIf you encounter any issue, feel "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),t._v(" to send us an issue report at:\n\n  https://github.com/nearform/node-clinic/issues\n\nWhen creating an issue, it will be a huge "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("help")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" us "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" you upload your\ndata to the clinic cloud. To "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" this, use clinic upload:\n\n  clinic upload 1000.clinic-doctor\n\nUtilities\nWhen using clinic a bunch you have fill up your directory with data folders and files.\nYou can clean these easily using clinic clean.\n\nMore information\nFor information on the clinic sub-commands, use the --help option:\n\n  clinic doctor --help\n  clinic bubbleprof --help\n  clinic upload --help\n  clinic clean --help\n  clinic flame --help\n\nFlags\n-h "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" --help                Display Help\n-v "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" --version             Display Version\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("blockquote",[n("ol",{attrs:{start:"4"}},[n("li",[this._v("We have a set of example apps on Github. Let's run through the first one using Clinic Doctor and autocannon:")])])])},function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone git@github.com:nearform/node-clinic-doctor-examples.git\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cd")]),t._v(" node-clinic-doctor-examples\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\nclinic doctor --on-port "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'autocannon localhost:"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$PORT")]),t._v("'")]),t._v(" -- node ./slow-io\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("blockquote",[n("p",[this._v("This will run autocannon against a simple app with an IO issue and once it's complete it will automatically launch the Doctor tool inside your browser.")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("h3",{attrs:{id:"接下来"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#接下来","aria-hidden":"true"}},[this._v("#")]),this._v(" 接下来")])},function(){var t=this.$createElement,n=this._self._c||t;return n("blockquote",[n("p",[this._v("Normally, when using Clinic, we begin by using Clinic Doctor to identify what performance problems exist in an application. Doctor will then give us recommendations on what tools and enquires to make next.")])])}],!1,null,null,null);n.default=a.exports}}]);