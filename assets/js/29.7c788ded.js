(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{169:function(e,t,s){"use strict";s.r(t);var r=s(0),a=Object(r.a)({},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"content"},[e._m(0),e._v(" "),s("p",[e._v("尽管火焰图主要是通过可视化堆栈顶部的指标来突出显示瓶颈，但它们也可用于了解应用程序的复杂性。")]),e._v(" "),e._m(1),e._v(" "),s("p",[e._v("如果火焰图有很多高涨堆栈，也可以认为是分布式瓶颈。如果我们可以找到减少堆栈大小的方法，比如通过删除不必要的层，这也可以提高应用程序性能。")]),e._v(" "),e._m(2),e._v(" "),s("p",[e._v("一个简单的优化方式就是替换我们使用的库，这些替代库在主逻辑中（the hottest paths）创建和调用更少的函数。")]),e._v(" "),e._m(3),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),s("p",[e._v("在 "),s("code",[e._v("3-server-with-reduced-call-graph.js")]),e._v(" 中，我们把 Express 切换为 "),s("a",{attrs:{href:"https://www.fastify.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Fastify"),s("OutboundLink")],1),e._v("。")]),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),e._m(9),e._v(" "),e._m(10),s("p",[e._v("我们来看结果：")]),e._v(" "),e._m(11),e._v(" "),e._m(12),e._v(" "),e._m(13),e._v(" "),e._m(14),e._v(" "),e._m(15),e._v(" "),e._m(16),e._v(" "),e._m(17),e._v(" "),s("p",[e._v("可以看到性能有巨大的提升。通过替换到专注于降低函数火焰图复杂性的框架，性能得到了显着改善。事实上，我们现在可以处理接近两倍的请求。")]),e._v(" "),e._m(18)])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"减小火焰图大小"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#减小火焰图大小","aria-hidden":"true"}},[this._v("#")]),this._v(" 减小火焰图大小")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("While Flamegraph's highlight bottlenecks primarily through visualizing the top-of-stack metric, they can also be used to understand application complexity.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("If a flamegraph has a lot of high rising stacks, this can also be thought of as a distributed bottleneck. If we can find ways to reduce the graph size, perhaps by removing unnecessary layers, this can also improve application performance.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("One potentially low hanging fruit can be replacing libraries with simpler or smarter alternatives that create and call less functions in the hottest paths.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("再看看我们通过 "),t("code",[this._v("2-server-with-optimized-function.js")]),this._v(" 生成的火焰图。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("Let's take a look at the flamegraph we already generated for 2-server-with-optimized-function.js:")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://clinicjs.org/static/de4a5813f3c6b55a8713462e117d7a7c/65be2/06-A.png",alt:""}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("In 3-server-with-reduced-call-graph.js we change the web framework from Express to Fastify.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("我们再生成 "),t("code",[this._v("3-server-with-reduced-call-graph.js")]),this._v(" 的火焰图：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("Let's generate a flamegraph for 3-server-with-reduced-call-graph.js:")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[this._v("clinic flame --on-port "),t("span",{pre:!0,attrs:{class:"token string"}},[this._v("'autocannon localhost:"),t("span",{pre:!0,attrs:{class:"token variable"}},[this._v("$PORT")]),this._v("'")]),this._v(" -- node 3-server-with-reduced-call-graph.js\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("Let's take a look at the resulting flamegraph:")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://clinicjs.org/static/d81062495d5e738b07588125894b8263/65be2/07-A.png",alt:""}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("这显然更简单，并且更少的蓝色意味着更少执行 "),t("code",[this._v("node_modules")]),this._v(" 中的代码。右侧有一个高大的蓝色柱子，但它非常细，说明虽然它存在复杂性，但速度很快。但是，在 "),t("code",[this._v("handleRequest")]),this._v(" 仍存在一些热函数，所以我们还可以做更多的优化。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("This is clearly simpler, and there's much less blue meaning less activity in dependencies. There's a tall blue column on the right, but it's very thin: therefore there is complexity there, but it is fast. There are, however, some hot frames under handleRequest, so there may still be more we can do.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("首先，我们必须确定性能确实已经有所改善。减少函数调用和复杂性并不总能使应用变快。我们可以使用 "),t("code",[this._v("autocannon")]),this._v(" 对比 "),t("code",[this._v("2-server-with-optimized-function.js")]),this._v(" 和 "),t("code",[this._v("3-server-with-reduced-call-graph.js")]),this._v(" 的区别：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("First, however, we must confirm that performance really has improved. Reducing function calls and complexity doesn't always result in a faster application. We can measure the difference between 2-server-with-optimized-function.js and 3-server-with-reduced-call-graph.js using autocannon:")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://clinicjs.org/static/ebc8088576d457c97993adb80c628050/6b9e0/07-B.png",alt:""}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("blockquote",[t("p",[this._v("That's a huge improvement. By swapping to a framework that focuses on reducing the function graph complexity, performance has significantly improved. In fact, we can now serve close to double the amount of requests.")])])}],!1,null,null,null);t.default=a.exports}}]);